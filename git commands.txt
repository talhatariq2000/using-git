git --help to show help
git <command> --help    - show help for command

git init    - create a .git folder to initialize git in a folder


git config --global ... - configure git


git add <filename>  - add file to track in a repo (*.html to add all html files | . to add all files)
git rm --cached <filename>   - untrack a file
git mv <filename> <newname> - rename a file


git status  - check current status of branches ( use -s for concise )


git restore <filename>  - undo changes in file


git commit  - commit changes ( ctrl+w to exit vscode ) ( for Vim use i to start writing and esc to stop writing :wq to exit )


git branch  - list branches (--all to list all local and remote branches)
git branch <branchname> - create branch
git checkout <branchname>   - switch branch
git branch --delete <branchname>    - delete branch
git merge <branchname>  - merge with a branch   ( for vim use i to write esc to stop writing :wq to exit )


git remote  - listing remote github repos
git remote add origin <links>   - linking remote git repo


git branch -M main  - change branchname from master to main


git push origin main    - push committed files to remote repo


git clone <link>    - clone remote repo


git pull    - pull changes from remote repo


git diff --staged   - compare staged file


git log - view history of commits  ( space to navigate ) ( use --oneline to concise ) ( --reverse to reverse list )

git show <commit-id / HEAD> - id to view a specefic commit OR HEAD to view the last commit ( HEAD~<number> the number of commits before head )
            //             :<filename>  - view specefic file in earlier commit
git ls-tree HEAD~<number>   - view all file list in a commit
git show <file-git-id>  - use unique file id to view a file in a commit

git restore --staged <filename> - restore changes from staging area to working dir ( use . in filename to restore everything )
git restore --source=HEAD~1 <filename>  - restore file from a previous commit

git clean   - undo untracked changes